[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/autocomposer-constants.js",
    "content": "module.exports = {\r\n  DEFAULT_NOTE_DURATION: \"1\",\r\n  DEFAULT_NUM_INSTRUMENTS: 3,\r\n\r\n  instrumentData: {\r\n    melody: {\r\n      role: \"melody\",\r\n      name: \"violin\",\r\n      gain: 1.7,\r\n      midiInstrumentCode: 40\r\n    },\r\n    accompaniment: {\r\n      role: \"accompaniment\",\r\n      name: \"acoustic_guitar_steel\",\r\n      gain: 1.6,\r\n      midiInstrumentCode: 25\r\n    },\r\n    bass: {\r\n      role: \"bass\",\r\n      name: \"acoustic_bass\",\r\n      gain: 1.65,\r\n      midiInstrumentCode: 32\r\n    },\r\n    getByName: function(instrName) {\r\n      for (var instrumentRole in this) {\r\n        if(instrName === this[instrumentRole].name) {\r\n          return this[instrumentRole];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  },\r\n\r\n  DEFAULT_LOWER_LIMIT: \"Db4\",\r\n  DEFAULT_UPPER_LIMIT: \"G#5\",\r\n\r\n  ACCOMPANIMENT_LOWER_LIMIT: \"Gb2\",\r\n  ACCOMPANIMENT_UPPER_LIMIT: \"C#4\",\r\n\r\n  BASS_LOWER_LIMIT: \"E1\",\r\n  BASS_UPPER_LIMIT: \"F2\",\r\n\r\n  NUM_GENERATIONS_LIMIT: 100000, // Number of melody generation attempts that the program will make.\r\n  NUM_MELODIES_LIMIT: 100 // Number of melodies that's returned'\r\n}\r\n",
    "static": true,
    "longname": "src/autocomposer-constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "src/autocomposer-logic.js",
    "content": "var range = require('tonal-range');\r\nvar chord = require('tonal-chord');\r\nvar note = require('tonal-note');\r\n\r\n/**\r\n * Encapsulates data and musical logic to be used by the application\r\n */\r\nclass AutoComposerLogic {\r\n  /**\r\n  * Returns all the chord types available for use.\r\n  * @return {string[]} - chord types available for use\r\n  */\r\n  getChordDictionary() {\r\n    return chord.names();\r\n  }\r\n\r\n  /**\r\n  * Filters out melodies that have a range larger than an octave.\r\n  * @param {string} melodyString - String representing the melody\r\n  * @return {boolean} - Returns false if the melody has a range larger than one octave. Returns true otherwise\r\n  */\r\n  filterMelodyRange(melodyString) {\r\n    var totalRange = range.numeric(melodyString);\r\n    var highest = Math.max.apply(null, totalRange);\r\n    var lowest = Math.min.apply(null, totalRange);\r\n\r\n    return highest - lowest <= 12;\r\n  }\r\n\r\n  /**\r\n  * Filters out melodies that are too repetitive. For our purposes, three of the same notes in a row would be too repetitive.\r\n  * Assumes a melody with at least three notes.\r\n  * @param {string} melodyString - String representing the melody\r\n  * @return {boolean} - Returns false if the melody is too repetitive\r\n  */\r\n  filterRepetition(melodyString) {\r\n    var melodyArray = melodyString.split(\" \");\r\n    var isNotRepetitive = true, ctrRepetitions = 0;\r\n\r\n    for(var i = 0; i < melodyArray.length - 1; i++) {\r\n      if(melodyArray[i] === melodyArray[i + 1]) {\r\n        // repetition found.\r\n        ctrRepetitions++;\r\n      }\r\n      if(ctrRepetitions >= 2) {\r\n        // this melody is too repetitive!\r\n        isNotRepetitive = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isNotRepetitive;\r\n  }\r\n    /**\r\n    * Parses text, and determines if user input represents a valid note/chord.\r\n    * @param {string} input - value given by the user\r\n    * @return {boolean} - a true value means the string can be used by the rest of the program.\r\n    */\r\n  isValidText(input) {\r\n    var isChord = chord.isKnownChord(input) ? true : false;\r\n    var isNote = note.name(input) ? true : false;\r\n\r\n    return isChord || isNote;\r\n  }\r\n\r\n    /**\r\n    * Converts ASCII accidentals to Unicode accidentals in HTML\r\n    * @param {string} input - text with ASCII accidentals\r\n    * @return {string} - text with Unicode accidentals in HTML\r\n    */\r\n  convertAsciiAccidentalsToHtml(input) {\r\n    var out = input.replace(/([A-G0-9])b/g, '$1&#9837;');\r\n    out = out.replace(/([A-G0-9])#/g, '$1&#9839;');\r\n    out = out.replace(/([A-G0-9])o/g, '$1&‌deg;');\r\n\r\n    return out;\r\n  }\r\n\r\n    /**\r\n    * Converts ASCII accidentals to Unicode accidentals\r\n    * @param {string} input - text with ASCII accidentals\r\n    * @return {string} - text with Unicode accidentals\r\n    */\r\n  convertAsciiAccidentalsToText(input) {\r\n    var out = input.replace(/([A-G0-9])b/g, '$1♭');\r\n    out = out.replace(/([A-G0-9])#/g, '$1♯');\r\n    out = out.replace(/([A-G0-9])o/g, '$1°');\r\n\r\n    return out;\r\n  }\r\n\r\n    /**\r\n    * Converts Unicode accidentals to ASCII\r\n    * @param {string} input - text with Unicode accidentals\r\n    * @return {string} - text with ASCII accidentals\r\n    */\r\n  convertAccidentalsToAscii(input) {\r\n    var out = input.replace(/([A-G0-9])♭/g, '$1b');\r\n    out = out.replace(/([A-G0-9])♯/g, '$1#');\r\n    out = out.replace(/([A-G0-9])°/g, '$1o');\r\n\r\n    return out;\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = new AutoComposerLogic();\r\n",
    "static": true,
    "longname": "src/autocomposer-logic.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "range",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~range",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "chord",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~chord",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "note",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~note",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-logic.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "class",
    "name": "AutoComposerLogic",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-logic.js",
    "importStyle": null,
    "description": "Encapsulates data and musical logic to be used by the application",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "getChordDictionary",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#getChordDictionary",
    "access": null,
    "description": "Returns all the chord types available for use.",
    "lineNumber": 13,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "chord types available for use"
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "filterMelodyRange",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#filterMelodyRange",
    "access": null,
    "description": "Filters out melodies that have a range larger than an octave.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "String representing the melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns false if the melody has a range larger than one octave. Returns true otherwise"
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "filterRepetition",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#filterRepetition",
    "access": null,
    "description": "Filters out melodies that are too repetitive. For our purposes, three of the same notes in a row would be too repetitive.\nAssumes a melody with at least three notes.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "String representing the melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns false if the melody is too repetitive"
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "isValidText",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#isValidText",
    "access": null,
    "description": "Parses text, and determines if user input represents a valid note/chord.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "value given by the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "a true value means the string can be used by the rest of the program."
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "convertAsciiAccidentalsToHtml",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAsciiAccidentalsToHtml",
    "access": null,
    "description": "Converts ASCII accidentals to Unicode accidentals in HTML",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with ASCII accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with Unicode accidentals in HTML"
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "convertAsciiAccidentalsToText",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAsciiAccidentalsToText",
    "access": null,
    "description": "Converts ASCII accidentals to Unicode accidentals",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with ASCII accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with Unicode accidentals"
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "convertAccidentalsToAscii",
    "memberof": "src/autocomposer-logic.js~AutoComposerLogic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-logic.js~AutoComposerLogic#convertAccidentalsToAscii",
    "access": null,
    "description": "Converts Unicode accidentals to ASCII",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "text with Unicode accidentals"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "text with ASCII accidentals"
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "autoComposerLogic",
    "memberof": "src/autocomposer-logic.js",
    "static": true,
    "longname": "src/autocomposer-logic.js~autoComposerLogic",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-logic.js",
    "importStyle": "autoComposerLogic",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/autocomposer-logic.js~AutoComposerLogic"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "src/autocomposer-melody.js",
    "content": "var tonal = require('tonal');\r\nvar ChordUnit = require('./chord-unit');\r\nvar MelodyUnit = require('./melody-unit');\r\n\r\nvar AcLogic = require('./autocomposer-logic');\r\nconst AcConstants = require('./autocomposer-constants');\r\n\r\n/**\r\n* Creates melodies from a given chord progression\r\n* @emits {statusUpdate} - Emits a \"statusUpdate\" event with details when important events happen (like melody generation finishing, etc.)\r\n*/\r\nclass AutoComposerMelody {\r\n  constructor() {\r\n    /** @type {string} */\r\n    this.lowerLimit = AcConstants.DEFAULT_LOWER_LIMIT;\r\n    /** @type {string} */\r\n    this.upperLimit = AcConstants.DEFAULT_UPPER_LIMIT;\r\n  }\r\n\r\n  /**\r\n  * Sends a status update that's displayed to the user.\r\n  * @private\r\n  * @param {string} message - status update message\r\n  * @emits {statusUpdate}\r\n  */\r\n  _sendStatusUpdate(message) {\r\n    var updateEvent = new CustomEvent('statusUpdate', {detail: message});\r\n    document.body.dispatchEvent(updateEvent);\r\n  }\r\n\r\n    /**\r\n    * For a given note, find its lowest instance in the specified range.\r\n    * @private\r\n    * @param {string} pitch - pitch class\r\n    * @param {string} lowerLimit - note (written in scientific notation)\r\n    * @param {string} upperLimit - note (written in scientific notation)\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  _getLowestNoteInRange(pitch, lowerLimit, upperLimit) {\r\n    var chordTonesInRange = tonal.range.pitchSet(pitch, [lowerLimit, upperLimit]);\r\n    return chordTonesInRange[0];\r\n  }\r\n\r\n    /**\r\n    * For a given array of chord tones, remove the specified pitches.\r\n    * @private\r\n    * @param {string[]} chordTones - chord tones\r\n    * @param {string[]} pitchArray - pitches to remove\r\n    * @return {string[]} - the remaining chord tones\r\n    */\r\n  _removePitchesFromChordTones(chordTones, pitchArray) {\r\n    var indexToRemove;\r\n    pitchArray.forEach(function(pitch) {\r\n      indexToRemove = chordTones.indexOf(pitch);\r\n      if (indexToRemove > -1) {\r\n        chordTones.splice(indexToRemove, 1);\r\n      }\r\n    });\r\n    return chordTones;\r\n  }\r\n\r\n    /**\r\n    * For a given MelodyUnit, get a simple accompaniment for it.\r\n    * @param {MelodyUnit} melodyUnit - melody that needs accompaniment\r\n    * @return {string[]} - array of strings, each representing one or more notes to play under each melodic note.\r\n    */\r\n  buildSimpleAccompaniment(melodyUnit) {\r\n    // Omit root note, and maybe avoid doubling the top note as well.\r\n    var noteArray = [], chordNotes, currentChord, bassPitch, topPitch;\r\n\r\n    for(var i = 0; i < melodyUnit.chordProgression.length; i++) {\r\n      currentChord = melodyUnit.chordProgression[i];\r\n      bassPitch = tonal.chord.parse(currentChord)[\"tonic\"];\r\n      topPitch =  tonal.note.pc(melodyUnit.melodyNotes[i]);\r\n\r\n      chordNotes = tonal.chord.notes(currentChord);\r\n      chordNotes = this._removePitchesFromChordTones(chordNotes, [topPitch]);\r\n\r\n      for(var j = 0; j < chordNotes.length; j++) {\r\n        chordNotes[j] = this._getLowestNoteInRange(chordNotes[j], AcConstants.ACCOMPANIMENT_LOWER_LIMIT, AcConstants.ACCOMPANIMENT_UPPER_LIMIT);\r\n      }\r\n      noteArray.push(chordNotes.join(\" \"));\r\n    }\r\n\r\n    return noteArray;\r\n  }\r\n\r\n    /**\r\n    * For a given MelodyUnit, return a basic bass line consisting only of root notes.\r\n    * @private\r\n    * @param {MelodyUnit} melodyUnit - melody that needs a bassline\r\n    * @return {string[]} - array of strings, each one representing a bass note.\r\n    */\r\n  buildBasicBassLine(melodyUnit) {\r\n    var noteArray = [], currentChord, bassPitch, bassNote;\r\n\r\n    // return all the lowest root notes for the progression.\r\n    for(var i = 0; i < melodyUnit.chordProgression.length; i++) {\r\n      currentChord = melodyUnit.chordProgression[i];\r\n      bassPitch = tonal.chord.parse(currentChord)[\"tonic\"];\r\n      bassNote = this._getLowestNoteInRange(bassPitch, AcConstants.BASS_LOWER_LIMIT, AcConstants.BASS_UPPER_LIMIT);\r\n\r\n      noteArray.push(bassNote);\r\n    }\r\n\r\n    return noteArray;\r\n  }\r\n\r\n    /**\r\n    * For a given chord, get all the chord tones between the upper and lower limits.\r\n    * @private\r\n    * @param {string} chord - chord symbol\r\n    * @param {string} lowerLimit - note (written in scientific notation)\r\n    * @param {string} upperLimit - note (written in scientific notation)\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  _getAllChordTones(chord, lowerLimit, upperLimit) {\r\n    var chordTones = tonal.chord(chord);\r\n    var chordTonesInRange = tonal.range.pitchSet(chordTones, [lowerLimit, upperLimit]);\r\n\r\n    for(var i = 0; i < chordTonesInRange.length; i++) {\r\n      for(var j = 0; j < chordTones.length; j++) {\r\n        // Fixing pesky issue where D7 was returned as \"D Gb A C\" instead of \"D F# A C\"\r\n        // If the current chord tone is enharmonic with the note from the pitch set,\r\n        // Override it with the chord tone.\r\n        if(tonal.note.pc(chordTonesInRange[i]) != chordTones[j]\r\n          && tonal.note.enharmonics(chordTones[j]).indexOf(tonal.note.pc(chordTonesInRange[i])) > -1) {\r\n          chordTonesInRange[i] = chordTones[j] + tonal.note.oct(chordTonesInRange[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return chordTonesInRange;\r\n  }\r\n\r\n    /**\r\n    * For a given chord symbol, creates a ChordUnit object\r\n    * @private\r\n    * @param {string} chord - chord symbol\r\n    * @param {string} lowerLimit - note (in scientific notation)\r\n    * @param {string} upperLimit - note (in scientific notation)\r\n    * @return {ChordUnit}\r\n    */\r\n  _buildChordUnit(chord, lowerLimit, upperLimit) {\r\n    var chordTonesInRange = this._getAllChordTones(chord, lowerLimit, upperLimit);\r\n    var chordUnit = new ChordUnit.ChordUnit(chord, chordTonesInRange, null);\r\n    return chordUnit;\r\n  }\r\n\r\n    /**\r\n    * For a given melody, creates a MelodyUnit object\r\n    * @private\r\n    * @param {string[]} chordProgression - a chord progression\r\n    * @param {string} melodyString - a melody (in scientific notation)\r\n    * @return {MelodyUnit}\r\n    */\r\n  _buildMelodyUnit(chordProgression, melodyString) {\r\n    var arrMelody = melodyString.split(\" \");\r\n    var melodyUnit = new MelodyUnit.MelodyUnit(chordProgression, arrMelody);\r\n    return melodyUnit;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression and melody, generate a series of melodies that fit over the progression\r\n    * @private\r\n    * @param {string[]} chordProgression - a chord progression\r\n    * @param {string[]} rawMelodies - a string representing the melody\r\n    * @param {Object} options - if true, generated melodies will be sorted, with smoothest melodies coming first.\r\n    * @param {boolean} options.sort - if true, generated melodies will be sorted, with smoothest melodies coming first.\r\n    * @param {number} options.limit - limits the output to a set number.\r\n    * @return {MelodyUnit[]} - a list of ChordUnit objects.\r\n    */\r\n  _buildMelodyUnitList(chordProgression, rawMelodies, options) {\r\n    var melodyUnits = [];\r\n    var haxThis = this;\r\n\r\n    rawMelodies.forEach(function(rawMelody) {\r\n      melodyUnits.push(haxThis._buildMelodyUnit(chordProgression, rawMelody));\r\n    });\r\n\r\n    if(options) {\r\n      if(options.sort) {\r\n        melodyUnits.sort(function(a, b) {\r\n          return a.smoothness - b.smoothness;\r\n        });\r\n      }\r\n\r\n      if(options.limit) {\r\n        melodyUnits.splice(options.limit);\r\n      }\r\n    }\r\n    return melodyUnits;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression\r\n    * @private\r\n    * @param {string[]} chordProgression - chord symbols\r\n    * @param {string} lowerLimit - lower limit (in scientific notation). Optional value.\r\n    * @param {string} upperLimit - upper limit (in scientific notation). Optional value.\r\n    * @return {ChordUnit[]} - a list of ChordUnit objects.\r\n    */\r\n  _buildChordUnitList(chordProgression, lowerLimit, upperLimit) {\r\n    if(lowerLimit == null) {\r\n      lowerLimit = this.lowerLimit;\r\n    }\r\n    if(upperLimit == null) {\r\n      upperLimit = this.upperLimit;\r\n    }\r\n\r\n    var chordUnitList = [];\r\n    var chordTonesInRange;\r\n\r\n    for(var i = chordProgression.length - 1; i >= 0; i--) {\r\n      chordTonesInRange = this._getAllChordTones(chordProgression[i], lowerLimit, upperLimit);\r\n\r\n      if(i === chordProgression.length) {\r\n        chordUnitList[i] = new ChordUnit.ChordUnit(chordProgression[i], chordTonesInRange, null);\r\n      } else {\r\n        chordUnitList[i] = new ChordUnit.ChordUnit(chordProgression[i], chordTonesInRange, chordUnitList[i + 1]);\r\n      }\r\n    }\r\n\r\n    return chordUnitList;\r\n  }\r\n\r\n    /**\r\n    * Recursive function that adds new notes to the previous notes passed into it.\r\n    * On the first call of this function, melodyList should be null.\r\n    * @private\r\n    * @param {ChordUnit} chordUnit - the ChordUnit for the next chord\r\n    * @param {?string[]} melodyList - list of existing melodies\r\n    * @param {Object} options - if true, generated melodies will be filtered\r\n    * @param {boolean} options.filtered - if true, generated melodies will be filtered\r\n    * @return {string[]} - a list of melodies. Each element is a string represeting a melody. Each melody string is written as a series of pitches delimited by a space.\r\n    */\r\n  _buildSimpleMelodiesCore(chordUnit, melodyList, options) {\r\n    var returnList = [];\r\n    var chordTones = chordUnit.chordTones;\r\n    var currentMelody, currentChordTone;\r\n    var rawMelody, newMelody, isInRange;\r\n    var isNotRepetitive, timestamp, haxThis = this;\r\n\r\n    if(melodyList) {\r\n      // We're somewhere along the middle of the chain.\r\n      for(var i = 0; i < melodyList.length; i++) {\r\n        currentMelody = melodyList[i];\r\n\r\n        for(var j = 0; j < chordTones.length; j++) {\r\n          currentChordTone = chordTones[j];\r\n\r\n          if(melodyList.length > 10000) {\r\n            timestamp = new Date().valueOf().toString().slice(-8);\r\n            if(timestamp % 8 === 0) {\r\n              // Randomly skips generation every now and then.\r\n              // Removes 20% of results?\r\n              break;\r\n            }\r\n          }\r\n\r\n          newMelody = currentMelody + \" \" + currentChordTone;\r\n\r\n          if(options.filtered) {\r\n            // check the distance of the last note and the new chord tone\r\n            // if it's more than an octave, skip this.\r\n            isInRange = AcLogic.filterMelodyRange(newMelody);\r\n            if(!isInRange) {\r\n              break;\r\n            }\r\n\r\n            if(newMelody.split(\" \").length >= 3) {\r\n              // check if melody is too repetitive. For our purposes, three of the same notes in a row\r\n              // would be too repetitive.\r\n              isNotRepetitive =  AcLogic.filterRepetition(newMelody);\r\n            } else {\r\n              isNotRepetitive = true;\r\n            }\r\n            if(!isNotRepetitive) {\r\n              break;\r\n            }\r\n\r\n            returnList.push(newMelody);\r\n          } else {\r\n            returnList.push(newMelody);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // This is the beginning of the chain.\r\n      melodyList = chordUnit.chordTones;\r\n      returnList.push.apply(returnList, melodyList);\r\n    }\r\n\r\n    if(chordUnit.nextChordUnit) {\r\n      // We're somewhere before the end of the chain.\r\n      return this._buildSimpleMelodiesCore(chordUnit.nextChordUnit, returnList, options);\r\n    } else {\r\n      // End of the chain.\r\n      if(options.filtered && returnList.length > AcConstants.NUM_MELODIES_LIMIT) {\r\n        this._sendStatusUpdate(\"Generated  \" + returnList.length + \" melodies. Creating list of \" + AcConstants.NUM_MELODIES_LIMIT + \"...\");\r\n      } else {\r\n        this._sendStatusUpdate(\"Generated  \" + returnList.length + \" melodies.\");\r\n      }\r\n      return returnList;\r\n    }\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * @private\r\n    * @deprecated\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @return {MelodyUnit[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  buildAllMelodies(chordProgression) {\r\n    var chordUnitList = this._buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n    var melodies = this._buildSimpleMelodiesCore(chordUnitList[0], null, {filtered: false});\r\n\r\n    var melodyUnits = [];\r\n    var haxThis = this;\r\n    melodies.forEach(function(rawMelody) {\r\n      melodyUnits.push(haxThis._buildMelodyUnit(chordProgression, rawMelody));\r\n    });\r\n\r\n    return melodyUnits;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * @private\r\n    * @deprecated\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @return {string[]} - an array of notes (written in scientific pitch)\r\n    */\r\n  buildRawMelodies(chordProgression) {\r\n    var chordUnitList = this._buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n    var melodies = this._buildSimpleMelodiesCore(chordUnitList[0], null, {filtered: true});\r\n\r\n    return melodies;\r\n  }\r\n\r\n    /**\r\n    * For a given chord progression, generate a series of melodies that fit over the progression.\r\n    * The melodies are sorted by smoothness, and are limited to the smoothest 100 melodies by default.\r\n    * @param {string[]} chordProgression - chord progression given by user\r\n    * @param {Object} [options] - options for melody generation\r\n    * @param {Object} [options.raw] - if true, returns output as strings (default = false)\r\n    * @param {Object} [options.limit] - if false, returns all the generated melodies, not just the top 100 (default = true)\r\n    * @param {Object} [options.filter] - if false, returns melodies that are considered too \"ugly\" for the default process. (default = true)\r\n    * @return {MelodyUnit[]} - an array of MelodyUnits\r\n    */\r\n  buildSimpleMelodies(chordProgression, options) {\r\n    // TODO - change the input to accept both {string} and {string[]}\r\n    var useDefault, melodyUnits, rawMelodies, coreOptions, muOptions;\r\n    var rawOption, limitOption, filterOption, sortOption;\r\n    var chordUnitList = this._buildChordUnitList(chordProgression, this.lowerLimit, this.upperLimit);\r\n\r\n    if(options) {\r\n      // In all these ternary operations, the default value is on the right.\r\n      rawOption = options.raw && (options.raw === \"true\" || options.raw === true) ? true : false;\r\n      filterOption = typeof options.filter !== \"undefined\" && (options.filter === \"false\" || options.limit === false) ? false : true;\r\n      if(typeof options.filter !== \"undefined\" && (options.limit === \"false\" || options.limit === false)) {\r\n        limitOption = null;\r\n        sortOption = false;\r\n      } else {\r\n        // default vals\r\n        limitOption = AcConstants.NUM_MELODIES_LIMIT;\r\n        sortOption = true;\r\n      }\r\n    } else {\r\n      // default values\r\n      rawOption = false;\r\n      filterOption = true;\r\n      limitOption = AcConstants.NUM_MELODIES_LIMIT;\r\n      sortOption = true;\r\n    }\r\n\r\n    rawMelodies = this._buildSimpleMelodiesCore(chordUnitList[0], null, {filtered: filterOption});\r\n\r\n    if(rawOption) {\r\n      return rawMelodies;\r\n    }\r\n\r\n    melodyUnits = this._buildMelodyUnitList(chordProgression, rawMelodies, {sort: sortOption, limit: limitOption});\r\n    return melodyUnits;\r\n  }\r\n\r\n};\r\n\r\nmodule.exports = new AutoComposerMelody();\r\n",
    "static": true,
    "longname": "src/autocomposer-melody.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "name": "tonal",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~tonal",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "ChordUnit",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~ChordUnit",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "MelodyUnit",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~MelodyUnit",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "AcLogic",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AcLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "AcConstants",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AcConstants",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "class",
    "name": "AutoComposerMelody",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": null,
    "description": "Creates melodies from a given chord progression",
    "lineNumber": 12,
    "pseudoExport": true,
    "emits": [
      {
        "types": [
          "statusUpdate"
        ],
        "description": "Emits a \"statusUpdate\" event with details when important events happen (like melody generation finishing, etc.)"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 21,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "lowerLimit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#lowerLimit",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "upperLimit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#upperLimit",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "_sendStatusUpdate",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_sendStatusUpdate",
    "access": "private",
    "description": "Sends a status update that's displayed to the user.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "status update message"
      }
    ],
    "emits": [
      {
        "types": [
          "statusUpdate"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "_getLowestNoteInRange",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_getLowestNoteInRange",
    "access": "private",
    "description": "For a given note, find its lowest instance in the specified range.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pitch",
        "description": "pitch class"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (written in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (written in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "_removePitchesFromChordTones",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_removePitchesFromChordTones",
    "access": "private",
    "description": "For a given array of chord tones, remove the specified pitches.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordTones",
        "description": "chord tones"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "pitchArray",
        "description": "pitches to remove"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "the remaining chord tones"
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "buildSimpleAccompaniment",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildSimpleAccompaniment",
    "access": null,
    "description": "For a given MelodyUnit, get a simple accompaniment for it.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "MelodyUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyUnit",
        "description": "melody that needs accompaniment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "array of strings, each representing one or more notes to play under each melodic note."
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "buildBasicBassLine",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildBasicBassLine",
    "access": "private",
    "description": "For a given MelodyUnit, return a basic bass line consisting only of root notes.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "MelodyUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyUnit",
        "description": "melody that needs a bassline"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "array of strings, each one representing a bass note."
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "_getAllChordTones",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_getAllChordTones",
    "access": "private",
    "description": "For a given chord, get all the chord tones between the upper and lower limits.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (written in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (written in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "_buildChordUnit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_buildChordUnit",
    "access": "private",
    "description": "For a given chord symbol, creates a ChordUnit object",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "note (in scientific notation)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "note (in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChordUnit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "_buildMelodyUnit",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_buildMelodyUnit",
    "access": "private",
    "description": "For a given melody, creates a MelodyUnit object",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "a chord progression"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyString",
        "description": "a melody (in scientific notation)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "_buildMelodyUnitList",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_buildMelodyUnitList",
    "access": "private",
    "description": "For a given chord progression and melody, generate a series of melodies that fit over the progression",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "a chord progression"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "rawMelodies",
        "description": "a string representing the melody"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "if true, generated melodies will be sorted, with smoothest melodies coming first."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sort",
        "description": "if true, generated melodies will be sorted, with smoothest melodies coming first."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.limit",
        "description": "limits the output to a set number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "a list of ChordUnit objects."
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "_buildChordUnitList",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_buildChordUnitList",
    "access": "private",
    "description": "For a given chord progression, generate a series of melodies that fit over the progression",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord symbols"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lowerLimit",
        "description": "lower limit (in scientific notation). Optional value."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "upperLimit",
        "description": "upper limit (in scientific notation). Optional value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChordUnit[]"
      ],
      "spread": false,
      "description": "a list of ChordUnit objects."
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "_buildSimpleMelodiesCore",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#_buildSimpleMelodiesCore",
    "access": "private",
    "description": "Recursive function that adds new notes to the previous notes passed into it.\nOn the first call of this function, melodyList should be null.",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "chordUnit",
        "description": "the ChordUnit for the next chord"
      },
      {
        "nullable": true,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyList",
        "description": "list of existing melodies"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "if true, generated melodies will be filtered"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.filtered",
        "description": "if true, generated melodies will be filtered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "a list of melodies. Each element is a string represeting a melody. Each melody string is written as a series of pitches delimited by a space."
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "buildAllMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildAllMelodies",
    "access": "private",
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.",
    "lineNumber": 315,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "buildRawMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildRawMelodies",
    "access": "private",
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.",
    "lineNumber": 335,
    "deprecated": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "an array of notes (written in scientific pitch)"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "buildSimpleMelodies",
    "memberof": "src/autocomposer-melody.js~AutoComposerMelody",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-melody.js~AutoComposerMelody#buildSimpleMelodies",
    "access": null,
    "description": "For a given chord progression, generate a series of melodies that fit over the progression.\nThe melodies are sorted by smoothness, and are limited to the smoothest 100 melodies by default.",
    "lineNumber": 352,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "chord progression given by user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options for melody generation"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.raw",
        "description": "if true, returns output as strings (default = false)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.limit",
        "description": "if false, returns all the generated melodies, not just the top 100 (default = true)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.filter",
        "description": "if false, returns melodies that are considered too \"ugly\" for the default process. (default = true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MelodyUnit[]"
      ],
      "spread": false,
      "description": "an array of MelodyUnits"
    }
  },
  {
    "__docId__": 38,
    "kind": "variable",
    "name": "autoComposerMelody",
    "memberof": "src/autocomposer-melody.js",
    "static": true,
    "longname": "src/autocomposer-melody.js~autoComposerMelody",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-melody.js",
    "importStyle": "autoComposerMelody",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/autocomposer-melody.js~AutoComposerMelody"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "src/autocomposer-midi-player.js",
    "content": "// Plays MIDI files on the browser!\r\n\r\nconst MidiPlayer = require('midi-player-js');\r\nconst SoundfontPlayer = require('soundfont-player');\r\nconst tonalNote = require('tonal-note');\r\n\r\nconst AcMidiWriter = require('./autocomposer-midi-writer');\r\nconst AcConstants = require('./autocomposer-constants');\r\nconst INSTRUMENT_DATA = AcConstants.instrumentData;\r\n\r\n/**\r\n* Class responsible for playing audio on the browser.\r\n* @emits {statusUpdate} - Emits this event when the audio player loads.\r\n*/\r\n\r\nclass AutoComposerMidiPlayer {\r\n  constructor() {\r\n    this.instruments = {};\r\n    this.numInstrumentsInit = 0;\r\n\r\n    this.player = null;\r\n    this.audioContext = new AudioContext();\r\n\r\n    this.initialized = false;\r\n    // Added this flag to fix an issue where notes randomly play again after the track ends.\r\n    // It only works for tracks that are all the same length. If we ever have to play tracks that have\r\n    // different lengths, we'll need a different solution.\r\n    this.playbackLocked = true;\r\n\r\n    // is this kind of scope hackery necessary?!\r\n    var haxThis = this;\r\n    var currentInstrument;\r\n\r\n    for (var instrumentRole in INSTRUMENT_DATA) {\r\n      // initialize each instrument\r\n      if(typeof INSTRUMENT_DATA[instrumentRole] !== \"function\") {\r\n        Soundfont.instrument(this.audioContext, INSTRUMENT_DATA[instrumentRole].name, {soundfont: 'FluidR3_GM'}).then(function (sfInstrument) {\r\n          currentInstrument = INSTRUMENT_DATA.getByName(sfInstrument.name);\r\n\r\n          haxThis.instruments[currentInstrument.role] = sfInstrument;\r\n\r\n          haxThis.numInstrumentsInit++;\r\n\r\n          if(haxThis.numInstrumentsInit === AcConstants.DEFAULT_NUM_INSTRUMENTS) {\r\n            haxThis._finishLoad();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n    /**\r\n    * Triggers the note playing for all instruments. Called for every MIDI event in the app.\r\n    * @private\r\n    * @param {number} event - MIDI event\r\n    */\r\n  _midiCallback(event) {\r\n    // callback for MIDI events\r\n    var instr1 = this.instruments[\"melody\"];\r\n    var instr2 = this.instruments[\"accompaniment\"];\r\n    var instr3 = this.instruments[\"bass\"];\r\n\r\n    if (!this.playbackLocked && event.name == 'Note on' && event.velocity > 0) {\r\n        switch(event.track) {\r\n          case 1:\r\n            instr1.play(event.noteName, this.audioContext.currentTime, {gain: instr1.gain});\r\n            break;\r\n          case 2:\r\n            instr2.play(event.noteName, this.audioContext.currentTime, {gain: instr2.gain});\r\n            break;\r\n          case 3:\r\n            instr3.play(event.noteName, this.audioContext.currentTime, {gain: instr3.gain});\r\n            break;\r\n          default:\r\n            // nothing!\r\n        }\r\n    }\r\n\r\n    if (event.name == 'Note off') {\r\n      switch(event.track) {\r\n        case 1:\r\n          instr1.stop();\r\n          break;\r\n        case 2:\r\n          instr2.stop();\r\n          break;\r\n        case 3:\r\n          instr3.stop();\r\n          break;\r\n        default:\r\n          // nothing!\r\n      }\r\n    }\r\n\r\n    if (event.name == \"End of Track\") {\r\n      this.playbackLocked = true;\r\n    }\r\n  }\r\n\r\n    /**\r\n    * Completes the loading of this class. The \"midiPlayerReady\" eve\r\n    * @private\r\n    * @emits {statusUpdate} - Emits this event when the audio player successfully loads\r\n    */\r\n  _finishLoad() {\r\n    var haxThis = this;\r\n    this.player = new MidiPlayer.Player(function(event) {\r\n      haxThis._midiCallback(event);\r\n    });\r\n    this.initialized = true;\r\n    this.playbackLocked = false;\r\n\r\n    var updateEvent = new CustomEvent('statusUpdate', {detail: \"MIDI player is loaded!\"});\r\n    document.body.dispatchEvent(updateEvent);\r\n  }\r\n\r\n    /**\r\n    * Plays the given melody.\r\n    * @param {string[]} melodySolo - solo melody (violin)\r\n    */\r\n  playMelodySolo(melodySolo) {\r\n    var strMidi = AcMidiWriter.buildMelodyMidi(melodySolo);\r\n    this._playMelody(strMidi);\r\n  }\r\n    /**\r\n    * Plays the given melodies.\r\n    * @param {string[]} melodySolo - solo melody (violin)\r\n    * @param {string[]} melodyAccomp - accompaniment melody (piano)\r\n    * @param {string[]} melodyBass - bass melody (bass)\r\n    */\r\n  playMelodyWithAccompaniment(melodySolo, melodyAccomp, melodyBass) {\r\n    var strMidi = AcMidiWriter.buildMelodyMidiWithAccompaniment(melodySolo, melodyAccomp, melodyBass);\r\n    this._playMelody(strMidi);\r\n  }\r\n\r\n    /**\r\n    * Actually plays the given melody\r\n    * @private\r\n    * @param {string} strMidi - MIDI data, as a DataURI string.\r\n    */\r\n  _playMelody(strMidi) {\r\n    if(this.initialized) {\r\n      this.stopPlayback();\r\n      this.playbackLocked = false;\r\n      this.player.loadDataUri(strMidi);\r\n      this.player.play();\r\n    } else {\r\n      console.warn(\"[AutoComposerMidi._playMelody()] Player isn't initialized yet...\");\r\n    }\r\n  }\r\n\r\n    /**\r\n    * Stops all playback\r\n    */\r\n  stopPlayback() {\r\n    this.instruments[\"melody\"].stop();\r\n    this.instruments[\"accompaniment\"].stop();\r\n    this.instruments[\"bass\"].stop();\r\n    this.player.stop();\r\n  }\r\n}\r\n\r\nmodule.exports = new AutoComposerMidiPlayer();\r\n",
    "static": true,
    "longname": "src/autocomposer-midi-player.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "name": "MidiPlayer",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~MidiPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "name": "SoundfontPlayer",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~SoundfontPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "name": "tonalNote",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~tonalNote",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "name": "AcMidiWriter",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~AcMidiWriter",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "name": "AcConstants",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~AcConstants",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "variable",
    "name": "INSTRUMENT_DATA",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~INSTRUMENT_DATA",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "class",
    "name": "AutoComposerMidiPlayer",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": null,
    "description": "Class responsible for playing audio on the browser.",
    "lineNumber": 16,
    "pseudoExport": true,
    "emits": [
      {
        "types": [
          "statusUpdate"
        ],
        "description": "Emits this event when the audio player loads."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 47,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "instruments",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#instruments",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "numInstrumentsInit",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#numInstrumentsInit",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "player",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#player",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "audioContext",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#audioContext",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "initialized",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#initialized",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "_midiCallback",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#_midiCallback",
    "access": "private",
    "description": "Triggers the note playing for all instruments. Called for every MIDI event in the app.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "MIDI event"
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "_finishLoad",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#_finishLoad",
    "access": "private",
    "description": "Completes the loading of this class. The \"midiPlayerReady\" eve",
    "lineNumber": 106,
    "params": [],
    "emits": [
      {
        "types": [
          "statusUpdate"
        ],
        "description": "Emits this event when the audio player successfully loads"
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "player",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#player",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "initialized",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#initialized",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "playMelodySolo",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playMelodySolo",
    "access": null,
    "description": "Plays the given melody.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodySolo",
        "description": "solo melody (violin)"
      }
    ]
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "playMelodyWithAccompaniment",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playMelodyWithAccompaniment",
    "access": null,
    "description": "Plays the given melodies.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodySolo",
        "description": "solo melody (violin)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyAccomp",
        "description": "accompaniment melody (piano)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyBass",
        "description": "bass melody (bass)"
      }
    ]
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_playMelody",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#_playMelody",
    "access": "private",
    "description": "Actually plays the given melody",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "strMidi",
        "description": "MIDI data, as a DataURI string."
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "playbackLocked",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#playbackLocked",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "stopPlayback",
    "memberof": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-player.js~AutoComposerMidiPlayer#stopPlayback",
    "access": null,
    "description": "Stops all playback",
    "lineNumber": 156,
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "autoComposerMidiPlayer",
    "memberof": "src/autocomposer-midi-player.js",
    "static": true,
    "longname": "src/autocomposer-midi-player.js~autoComposerMidiPlayer",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-midi-player.js",
    "importStyle": "autoComposerMidiPlayer",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/autocomposer-midi-player.js~AutoComposerMidiPlayer"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/autocomposer-midi-writer.js",
    "content": "var MidiWriter = require('midi-writer-js');\r\nvar MidiPlayer = require('midi-player-js');\r\nvar SoundfontPlayer = require('soundfont-player');\r\nvar tonalNote = require('tonal-note');\r\n\r\nconst AcConstants = require('./autocomposer-constants');\r\nconst INSTRUMENT_DATA = AcConstants.instrumentData;\r\n\r\n/**\r\n* Class responsible for generating MIDI files for future playback.\r\n*/\r\n\r\nclass AutoComposerMidiWriter {\r\n  constructor() {\r\n  }\r\n\r\n    /**\r\n    * Builds MIDI info for a note or chord\r\n    * @private\r\n    * @param {number[]} arrNumMidi - MIDI numbers for a set of pitches\r\n    * @param {number} duration - MIDI number for a pitch\r\n    * @param {number} wait\r\n    * @return {MidiWriter.NoteEvent} - ???\r\n    */\r\n  _buildMidi(arrNumMidi, duration, wait) {\r\n      if(!wait) {\r\n          wait = \"0\";\r\n      }\r\n      return new MidiWriter.NoteEvent({pitch: arrNumMidi, duration: duration, wait: wait, velocity: 100});\r\n  }\r\n\r\n    /**\r\n    * Builds a Track from a given chord.\r\n    * @private\r\n    * @param {string[]} arrChordNotes - chordNotes\r\n    * @param {Object} instrData - instrument data for track\r\n    * @return {Track} - a MidiWriter Track\r\n    */\r\n  _buildTrack(arrChordNotes, instrData) {\r\n    var notes, midiNumber, midiNumbers;\r\n    var returnTrack = new MidiWriter.Track();\r\n    returnTrack.addEvent(new MidiWriter.ProgramChangeEvent({instrument : instrData.midiInstrumentCode}));\r\n    returnTrack.addInstrumentName(instrData.name);\r\n\r\n    for(var i = 0; i < arrChordNotes.length; i++) {\r\n      midiNumbers = [];\r\n      notes = arrChordNotes[i].split(\" \");\r\n\r\n      notes.forEach(function(note){\r\n        midiNumbers.push(tonalNote.midi(note));\r\n      })\r\n\r\n      returnTrack.addEvent(this._buildMidi(midiNumbers, AcConstants.DEFAULT_NOTE_DURATION));\r\n    }\r\n\r\n    return returnTrack;\r\n  }\r\n\r\n    /**\r\n    * Gets the MIDI data for a given melody.\r\n    * @param {string[]} arrMelody - our melody\r\n    * @return {string} - MIDI data, as a DataURI string\r\n    */\r\n  buildMelodyMidi(arrMelody) {\r\n    var tracks = [], midiNumber;\r\n    tracks[0] = this._buildTrack(arrMelody, INSTRUMENT_DATA[\"melody\"]);\r\n\r\n    var write = new MidiWriter.Writer(tracks);\r\n\r\n    return write.dataUri();\r\n  }\r\n\r\n    /**\r\n    * Gets the MIDI data for a given melody, with accompaniment.\r\n    * @param {string[]} arrMelody - main melody\r\n    * @param {string[]} arrAcompanimentLine - accompaniment line\r\n    * @param {string[]} arrBassLine - bass line\r\n    * @return {string} - MIDI data, as a DataURI string.\r\n    */\r\n  buildMelodyMidiWithAccompaniment(arrMelody, arrAcompanimentLine, arrBassLine) {\r\n    var tracks, midiNumber;\r\n\r\n    var melodyTrack = this._buildTrack(arrMelody, INSTRUMENT_DATA[\"melody\"]);\r\n    var accompanimentTrack = this._buildTrack(arrAcompanimentLine, INSTRUMENT_DATA[\"accompaniment\"]);\r\n    var bassTrack = this._buildTrack(arrBassLine, INSTRUMENT_DATA[\"bass\"]);\r\n\r\n    tracks = [melodyTrack, accompanimentTrack, bassTrack];\r\n\r\n    var write = new MidiWriter.Writer(tracks);\r\n\r\n    return write.dataUri();\r\n  }\r\n}\r\n\r\nmodule.exports = new AutoComposerMidiWriter();\r\n",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "MidiWriter",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~MidiWriter",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "MidiPlayer",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~MidiPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "SoundfontPlayer",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~SoundfontPlayer",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "tonalNote",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~tonalNote",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "AcConstants",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~AcConstants",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "INSTRUMENT_DATA",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~INSTRUMENT_DATA",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "AutoComposerMidiWriter",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": null,
    "description": "Class responsible for generating MIDI files for future playback.",
    "lineNumber": 13,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_buildMidi",
    "memberof": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter#_buildMidi",
    "access": "private",
    "description": "Builds MIDI info for a note or chord",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrNumMidi",
        "description": "MIDI numbers for a set of pitches"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "MIDI number for a pitch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wait",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MidiWriter.NoteEvent"
      ],
      "spread": false,
      "description": "???"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_buildTrack",
    "memberof": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter#_buildTrack",
    "access": "private",
    "description": "Builds a Track from a given chord.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrChordNotes",
        "description": "chordNotes"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instrData",
        "description": "instrument data for track"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Track"
      ],
      "spread": false,
      "description": "a MidiWriter Track"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "buildMelodyMidi",
    "memberof": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter#buildMelodyMidi",
    "access": null,
    "description": "Gets the MIDI data for a given melody.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrMelody",
        "description": "our melody"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "MIDI data, as a DataURI string"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "buildMelodyMidiWithAccompaniment",
    "memberof": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/autocomposer-midi-writer.js~AutoComposerMidiWriter#buildMelodyMidiWithAccompaniment",
    "access": null,
    "description": "Gets the MIDI data for a given melody, with accompaniment.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrMelody",
        "description": "main melody"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrAcompanimentLine",
        "description": "accompaniment line"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arrBassLine",
        "description": "bass line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "MIDI data, as a DataURI string."
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "autoComposerMidiWriter",
    "memberof": "src/autocomposer-midi-writer.js",
    "static": true,
    "longname": "src/autocomposer-midi-writer.js~autoComposerMidiWriter",
    "access": null,
    "export": true,
    "importPath": "autocomposer-js/src/autocomposer-midi-writer.js",
    "importStyle": "autoComposerMidiWriter",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/autocomposer-midi-writer.js~AutoComposerMidiWriter"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/browser-build.js",
    "content": "var AutoComposerJS = window.AutoComposerJS || {};\r\n\r\nAutoComposerJS.melody = require('./autocomposer-melody');\r\nAutoComposerJS.midiWriter = require('./autocomposer-midi-writer');\r\nAutoComposerJS.midiPlayer = require('./autocomposer-midi-player');\r\nAutoComposerJS.logic = require('./autocomposer-logic');\r\nAutoComposerJS.constants = require('./autocomposer-constants');\r\n\r\nwindow.AutoComposerJS = AutoComposerJS;\r\n",
    "static": true,
    "longname": "src/browser-build.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "AutoComposerJS",
    "memberof": "src/browser-build.js",
    "static": true,
    "longname": "src/browser-build.js~AutoComposerJS",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/browser-build.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/chord-unit.js",
    "content": "var AutoComposerLogic = require('../src/autocomposer-logic');\r\n\r\n/**\r\n* Represents some data built around a specific chord.\r\n* Has a reference to the next ChordUnit in the progression, and the chord tones that will be used in melody generation.\r\n* @private\r\n*/\r\nclass ChordUnit {\r\n    /**\r\n    * @param {string} chord - chord symbol\r\n    * @param {string[]} chordTones - array of notes in the melody\r\n    * @param {ChordUnit} nextChordUnit - next ChordUnit in the chain\r\n    */\r\n  constructor(chord, chordTones, nextChordUnit) {\r\n    /** @type {string} */\r\n    this.chord = chord;\r\n    /** @type {string[]} */\r\n    this.chordTones = chordTones;\r\n    /** @type {ChordUnit} */\r\n    this.nextChordUnit = nextChordUnit;\r\n  }\r\n\r\n    /**\r\n    * @param {ChordUnit} next - the next ChordUnit in the chain.\r\n    */\r\n  setNextChordUnit(next) {\r\n    this.nextChordUnit(next);\r\n  }\r\n}\r\n\r\nexports.ChordUnit = ChordUnit;\r\n",
    "static": true,
    "longname": "src/chord-unit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "AutoComposerLogic",
    "memberof": "src/chord-unit.js",
    "static": true,
    "longname": "src/chord-unit.js~AutoComposerLogic",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/chord-unit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "ChordUnit",
    "memberof": "src/chord-unit.js",
    "static": true,
    "longname": "src/chord-unit.js~ChordUnit",
    "access": "private",
    "export": true,
    "importPath": "autocomposer-js/src/chord-unit.js",
    "importStyle": "{ChordUnit}",
    "description": "Represents some data built around a specific chord.\nHas a reference to the next ChordUnit in the progression, and the chord tones that will be used in melody generation.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/chord-unit.js~ChordUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chord",
        "description": "chord symbol"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordTones",
        "description": "array of notes in the melody"
      },
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "nextChordUnit",
        "description": "next ChordUnit in the chain"
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "chord",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#chord",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "chordTones",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#chordTones",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "nextChordUnit",
    "memberof": "src/chord-unit.js~ChordUnit",
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#nextChordUnit",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "ChordUnit"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "setNextChordUnit",
    "memberof": "src/chord-unit.js~ChordUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/chord-unit.js~ChordUnit#setNextChordUnit",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChordUnit"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "the next ChordUnit in the chain."
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/melody-unit.js",
    "content": "var range = require('tonal-range')\r\n\r\n/**\r\n* Represents a melody and associated metadata.\r\n* @public\r\n*/\r\nclass MelodyUnit {\r\n    /**\r\n    * @param {string[]} chordProgression - array of chord symbols\r\n    * @param {string[]} melodyNotes - array of notes in the melody\r\n    */\r\n  constructor(chordProgression, melodyNotes) {\r\n  \t/** @type {string[]} */\r\n    this.chordProgression = chordProgression;\r\n    /** @type {string[]} */\r\n    this.melodyNotes = melodyNotes;\r\n    /** @type {number} */\r\n    this.smoothness = this.getSmoothness();\r\n    /** @type {number} */\r\n    this.range = this.getRange();\r\n    /** @type {string} */\r\n    this.melodyString = this.melodyNotes.join(\" \");\r\n  }\r\n\r\n    /**\r\n    * Calculates the range of this melody.\r\n    * @private\r\n    * @return {number} - Range of the melody (in semitones)\r\n    */\r\n  getRange() {\r\n    var totalRange = range.numeric(this.melodyNotes);\r\n    var highest = Math.max.apply(null, totalRange);\r\n    var lowest = Math.min.apply(null, totalRange);\r\n\r\n    return highest - lowest;\r\n  }\r\n\r\n    /**\r\n    * Calculates the smoothness of this melody.\r\n    * @private\r\n    * @return {number} - Range of the melody (in semitones)\r\n    */\r\n  getSmoothness() {\r\n    var totalSmoothness = 0;\r\n    var subset, subRange, highest, lowest, distance;\r\n\r\n    for(var i = 2; i <= this.melodyNotes.length; i++) {\r\n      subset = this.melodyNotes.slice(i - 2, i);\r\n      subRange = range.numeric(subset);\r\n      highest = Math.max.apply(null, subRange);\r\n      lowest = Math.min.apply(null, subRange);\r\n      distance = highest - lowest;\r\n      totalSmoothness += distance;\r\n    }\r\n\r\n    return totalSmoothness;\r\n  }\r\n\r\n}\r\n\r\nexports.MelodyUnit = MelodyUnit;\r\n",
    "static": true,
    "longname": "src/melody-unit.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "range",
    "memberof": "src/melody-unit.js",
    "static": true,
    "longname": "src/melody-unit.js~range",
    "access": null,
    "export": false,
    "importPath": "autocomposer-js/src/melody-unit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "MelodyUnit",
    "memberof": "src/melody-unit.js",
    "static": true,
    "longname": "src/melody-unit.js~MelodyUnit",
    "access": "public",
    "export": true,
    "importPath": "autocomposer-js/src/melody-unit.js",
    "importStyle": "{MelodyUnit}",
    "description": "Represents a melody and associated metadata.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chordProgression",
        "description": "array of chord symbols"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "melodyNotes",
        "description": "array of notes in the melody"
      }
    ]
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "chordProgression",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#chordProgression",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "melodyNotes",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#melodyNotes",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "smoothness",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#smoothness",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "range",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#range",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "melodyString",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#melodyString",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getRange",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#getRange",
    "access": "private",
    "description": "Calculates the range of this melody.",
    "lineNumber": 30,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Range of the melody (in semitones)"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "getSmoothness",
    "memberof": "src/melody-unit.js~MelodyUnit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/melody-unit.js~MelodyUnit#getSmoothness",
    "access": "private",
    "description": "Calculates the smoothness of this melody.",
    "lineNumber": 43,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Range of the melody (in semitones)"
    }
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "testFile",
    "name": "test/autocomposer-logic.js",
    "content": "var assert = require('assert');\r\n\r\nvar AutoComposerLogic = require('../src/autocomposer-logic');\r\n\r\ndescribe('AutoComposerLogic', function() {\r\n  describe('#filterMelodyRange', function() {\r\n    it('should filter out melodies that have a range larger than an octave', function() {\r\n      // The filter function runs on each note addition for the melody generating function.\r\n      // So it should only be expected to look at the difference between the last two notes.\r\n\r\n      melodySmallRange = \"C4 G4 A4\";\r\n      melodyOctaveRange = \"G4 C4 C5\";\r\n      melodyBigRange = \"G4 C4 D5\";\r\n\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodySmallRange), true);\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodyOctaveRange), true);\r\n      assert.equal(AutoComposerLogic.filterMelodyRange(melodyBigRange), false);\r\n    });\r\n  });\r\n\r\n  describe('#filterRepetition', function() {\r\n    it('should filter out melodies that are too repetitive', function() {\r\n      melodyNoRepeats = \"C4 G4 A4 E5\";\r\n      melodyOneRepeat = \"C4 G4 G4 C5 E5\";\r\n      melodyTwoRepeats = \"C4 C4 G4 D5 D5 E3\";\r\n      melodyTwoSuccessiveRepeats = \"C4 G4 G4 G4 D5 C5\";\r\n\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyNoRepeats), true);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyOneRepeat), true);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyTwoRepeats), false);\r\n      assert.equal(AutoComposerLogic.filterRepetition(melodyTwoSuccessiveRepeats), false);\r\n    });\r\n  });\r\n\r\n  describe('#isValidText', function() {\r\n    it('should return true for chord inputs', function() {\r\n      assert.equal(AutoComposerLogic.isValidText('Gm7'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('C'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('D7'), true);\r\n      assert.equal(AutoComposerLogic.isValidText('A#m7b5'), true);\r\n    });\r\n\r\n    it('should return false for non-chord inputs', function() {\r\n      assert.equal(AutoComposerLogic.isValidText('H2'), false);\r\n      assert.equal(AutoComposerLogic.isValidText('456456'), false);\r\n      assert.equal(AutoComposerLogic.isValidText('Something really silly'), false);\r\n    });\r\n  });\r\n\r\n  describe('#convertAsciiAccidentalsToHtml', function() {\r\n    it('should convert ASCII accidentals to Unicode HTML entities', function() {\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('Bb'), 'B&#9837;');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('C#'), 'C&#9839;');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToHtml('Fo'), 'F&‌deg;');\r\n    });\r\n  });\r\n\r\n  describe('#convertAsciiAccidentalsToText', function() {\r\n    it('should convert ASCII accentals to Unicode versions', function() {\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('Bb'), 'B♭');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('C#'), 'C♯');\r\n      assert.equal(AutoComposerLogic.convertAsciiAccidentalsToText('Fo'), 'F°');\r\n    });\r\n  });\r\n\r\n  describe('#convertAccidentalsToAscii', function() {\r\n    it('should convert Unicode accentals to ASCII versions', function() {\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('B♭'), 'Bb');\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('C♯'), 'C#');\r\n      assert.equal(AutoComposerLogic.convertAccidentalsToAscii('F°'), 'Fo');\r\n    });\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/autocomposer-logic.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "testDescribe",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/autocomposer-logic.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0",
    "access": null,
    "description": "AutoComposerLogic",
    "lineNumber": 5
  },
  {
    "__docId__": 160,
    "kind": "testDescribe",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe1",
    "access": null,
    "description": "#filterMelodyRange",
    "lineNumber": 6
  },
  {
    "__docId__": 161,
    "kind": "testIt",
    "name": "it2",
    "testId": 2,
    "memberof": "test/autocomposer-logic.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe1.it2",
    "access": null,
    "description": "should filter out melodies that have a range larger than an octave",
    "lineNumber": 7
  },
  {
    "__docId__": 162,
    "kind": "testDescribe",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe3",
    "access": null,
    "description": "#filterRepetition",
    "lineNumber": 21
  },
  {
    "__docId__": 163,
    "kind": "testIt",
    "name": "it4",
    "testId": 4,
    "memberof": "test/autocomposer-logic.js~describe0.describe3",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe3.it4",
    "access": null,
    "description": "should filter out melodies that are too repetitive",
    "lineNumber": 22
  },
  {
    "__docId__": 164,
    "kind": "testDescribe",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5",
    "access": null,
    "description": "#isValidText",
    "lineNumber": 35
  },
  {
    "__docId__": 165,
    "kind": "testIt",
    "name": "it6",
    "testId": 6,
    "memberof": "test/autocomposer-logic.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5.it6",
    "access": null,
    "description": "should return true for chord inputs",
    "lineNumber": 36
  },
  {
    "__docId__": 166,
    "kind": "testIt",
    "name": "it7",
    "testId": 7,
    "memberof": "test/autocomposer-logic.js~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe5.it7",
    "access": null,
    "description": "should return false for non-chord inputs",
    "lineNumber": 43
  },
  {
    "__docId__": 167,
    "kind": "testDescribe",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe8",
    "access": null,
    "description": "#convertAsciiAccidentalsToHtml",
    "lineNumber": 50
  },
  {
    "__docId__": 168,
    "kind": "testIt",
    "name": "it9",
    "testId": 9,
    "memberof": "test/autocomposer-logic.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe8.it9",
    "access": null,
    "description": "should convert ASCII accidentals to Unicode HTML entities",
    "lineNumber": 51
  },
  {
    "__docId__": 169,
    "kind": "testDescribe",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe10",
    "access": null,
    "description": "#convertAsciiAccidentalsToText",
    "lineNumber": 58
  },
  {
    "__docId__": 170,
    "kind": "testIt",
    "name": "it11",
    "testId": 11,
    "memberof": "test/autocomposer-logic.js~describe0.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe10.it11",
    "access": null,
    "description": "should convert ASCII accentals to Unicode versions",
    "lineNumber": 59
  },
  {
    "__docId__": 171,
    "kind": "testDescribe",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/autocomposer-logic.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe12",
    "access": null,
    "description": "#convertAccidentalsToAscii",
    "lineNumber": 66
  },
  {
    "__docId__": 172,
    "kind": "testIt",
    "name": "it13",
    "testId": 13,
    "memberof": "test/autocomposer-logic.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-logic.js~describe0.describe12.it13",
    "access": null,
    "description": "should convert Unicode accentals to ASCII versions",
    "lineNumber": 67
  },
  {
    "__docId__": 173,
    "kind": "testFile",
    "name": "test/autocomposer-melody.js",
    "content": "var assert = require('assert');\r\nconst _ = require('underscore');\r\n\r\nvar AutoComposerMelody = require('../src/autocomposer-melody');\r\n\r\nAutoComposerMelody._sendStatusUpdate = function() {\r\n  // Overriding this function with nothing since it contains browser code.\r\n}\r\n\r\nvar AcLogic = require('../src/autocomposer-logic');\r\n\r\nvar TEST_CHORD_1 = \"Gm7\";\r\nvar TEST_CHORD_2 = \"Cm7\";\r\nvar TEST_CHORD_3 = \"D7\";\r\n\r\nvar TEST_LOWER_LIMIT_1 = \"Bb3\";\r\nvar TEST_UPPER_LIMIT_1 = \"G#4\";\r\n\r\nvar TEST_LOWER_LIMIT_2 = \"Ab4\";\r\nvar TEST_UPPER_LIMIT_2 = \"B5\";\r\n\r\ndescribe('AutoComposerMelody', function() {\r\n  describe('#_getAllChordTones', function() {\r\n    it('should return all chord tones in the range (inclusive)', function() {\r\n      expectedTones1 = [\"Bb3\", \"D4\", \"F4\", \"G4\"];\r\n      expectedTones2 = [\"A4\", \"C5\", \"D5\", \"F#5\", \"A5\"];\r\n\r\n      resultTones1 = AutoComposerMelody._getAllChordTones(TEST_CHORD_1, TEST_LOWER_LIMIT_1, TEST_UPPER_LIMIT_1);\r\n      resultTones2 = AutoComposerMelody._getAllChordTones(TEST_CHORD_3, TEST_LOWER_LIMIT_2, TEST_UPPER_LIMIT_2);\r\n\r\n      assert.deepEqual(resultTones1, expectedTones1);\r\n      assert.deepEqual(resultTones2, expectedTones2);\r\n    });\r\n  });\r\n\r\n  describe('#_buildChordUnitList', function() {\r\n    it('should return a list of ChordUnits for a given progression', function() {\r\n      var expChordUnit3 = {\r\n        chord: \"D7\",\r\n        chordTones: [\"A4\", \"C5\", \"D5\", \"F#5\", \"A5\"],\r\n      };\r\n      var expChordUnit2 = {\r\n        chord: \"Cm7\",\r\n        chordTones: [\"Bb4\", \"C5\", \"Eb5\", \"G5\", \"Bb5\"],\r\n      };\r\n      var expChordUnit1 = {\r\n        chord: \"Gm7\",\r\n        chordTones: [\"Bb4\", \"D5\", \"F5\", \"G5\", \"Bb5\"],\r\n      };\r\n\r\n      var expectedArray = [expChordUnit1, expChordUnit2, expChordUnit3];\r\n      var chordProgression = [\"Gm7\",\"Cm7\",\"D7\"];\r\n      var chordUnitList = AutoComposerMelody._buildChordUnitList(chordProgression, TEST_LOWER_LIMIT_2, TEST_UPPER_LIMIT_2);\r\n\r\n      assert.deepEqual(chordUnitList[0].chordTones, expectedArray[0].chordTones);\r\n      assert.deepEqual(chordUnitList[1].chordTones, expectedArray[1].chordTones);\r\n      assert.deepEqual(chordUnitList[2].chordTones, expectedArray[2].chordTones);\r\n    });\r\n  });\r\n\r\n  describe('#_buildMelodyUnit', function() {\r\n    it('should build a melody unit with metadata for each raw melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody1 = \"B3 G4 E4 F#4\";\r\n      var melody2 = \"G4 B4 C5 D5\";\r\n\r\n      exp1 = {\r\n        chordProgression: chordProgression,\r\n        melodyNotes: melody1.split(\" \"),\r\n        smoothness: 13,\r\n        range: 8,\r\n        melodyString: melody1\r\n      }\r\n\r\n      exp2 = {\r\n        chordProgression: chordProgression,\r\n        melodyNotes: melody2.split(\" \"),\r\n        smoothness: 7,\r\n        range: 7,\r\n        melodyString: melody2\r\n      }\r\n\r\n      result1 = AutoComposerMelody._buildMelodyUnit(chordProgression, melody1);\r\n      result2 = AutoComposerMelody._buildMelodyUnit(chordProgression, melody2);\r\n\r\n      assert.deepEqual(result1, exp1);\r\n      assert.deepEqual(result2, exp2);\r\n    });\r\n  });\r\n\r\n  describe('#_buildMelodyUnitList', function() {\r\n    var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n    var melodies = [\"B3 G4 E4 F#4\", \"G4 B4 C5 D5\", \"G4 G4 G4 F#4\", \"G5 G5 G5 A5\"];\r\n\r\n    it('should sort the output if specified', function() {\r\n      resultSorted = AutoComposerMelody._buildMelodyUnitList(chordProgression, melodies, {sort: true});\r\n\r\n      assert(resultSorted[0].smoothness < resultSorted[3].smoothness);\r\n    });\r\n\r\n    it('should limit the output if specified', function() {\r\n      var numLimit = 2;\r\n      result = AutoComposerMelody._buildMelodyUnitList(chordProgression, melodies, {limit: numLimit});\r\n\r\n      assert.equal(result.length, numLimit);\r\n    });\r\n  });\r\n\r\n  describe('#buildSimpleMelodies', function() {\r\n    it('should return a list of melodies for a given progression', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyList = AutoComposerMelody.buildAllMelodies(chordProgression);\r\n\r\n      assert.equal(typeof melodyList[0] === 'string', false);\r\n    });\r\n\r\n    it('should return less melodies if filters are on', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyListAll = AutoComposerMelody.buildAllMelodies(chordProgression);\r\n      var melodyList = AutoComposerMelody.buildSimpleMelodies(chordProgression);\r\n\r\n      assert(melodyListAll.length > melodyList.length, \"Filtered melody list is smaller than an unfiltered list\");\r\n      assert.equal(typeof melodyList[0] === 'string', false);\r\n    });\r\n\r\n    it('should return raw melodies as a string array', function() {\r\n      var chordProgression = [\"Gm\",\"Cm\",\"D\"];\r\n      var melodyList = AutoComposerMelody.buildRawMelodies(chordProgression);\r\n\r\n      assert.equal(typeof melodyList[0] === 'string', true);\r\n    });\r\n  });\r\n\r\n  describe('#buildBasicBassLine', function() {\r\n    it('should return a simple bassline for a melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody = \"B3 G4 E4 F#4\";\r\n      var melodyUnit = AutoComposerMelody._buildMelodyUnit(chordProgression, melody);\r\n\r\n      var resultBassline = AutoComposerMelody.buildBasicBassLine(melodyUnit);\r\n      var expBassline = [\"G1\", \"E1\", \"C2\", \"D2\"];\r\n\r\n      assert.deepEqual(resultBassline, expBassline);\r\n    });\r\n  });\r\n\r\n  describe('#buildSimpleAccompaniment', function() {\r\n    it('should return a simple accompaniment for a melody', function() {\r\n      var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n      var melody = \"B3 G4 E4 F#4\";\r\n      var expAccompaniment = [\"G2 D3\", \"E3 B2\", \"C3 G2\", \"D3 A2\"];\r\n\r\n      var melodyUnit = AutoComposerMelody._buildMelodyUnit(chordProgression, melody);\r\n      var resultBassline = AutoComposerMelody.buildSimpleAccompaniment(melodyUnit);\r\n\r\n      assert.deepEqual(resultBassline, expAccompaniment);\r\n    });\r\n  });\r\n\r\n  it('should not break after some refactoring...', function() {\r\n    var chordProgression = [\"Gm\",\"Cm\"];\r\n\r\n    var melodyList = AutoComposerMelody.buildSimpleMelodies(chordProgression);\r\n    var melodyListRaw = AutoComposerMelody.buildRawMelodies(chordProgression);\r\n    var melodyListAll = AutoComposerMelody.buildAllMelodies(chordProgression);\r\n\r\n    var melodyListRefactor = AutoComposerMelody.buildSimpleMelodies(chordProgression);\r\n    var melodyListRefactor2 = AutoComposerMelody.buildSimpleMelodies(chordProgression, {somethingDumb: \"yes\"});\r\n    var melodyListRawRefactor = AutoComposerMelody.buildSimpleMelodies(chordProgression, {raw: true});\r\n    var melodyListAllRefactor = AutoComposerMelody.buildSimpleMelodies(chordProgression, {limit: false, filter: false});\r\n\r\n    assert.deepEqual(melodyList, melodyListRefactor);\r\n    assert.deepEqual(melodyList, melodyListRefactor2);\r\n    assert.deepEqual(melodyListRaw, melodyListRawRefactor);\r\n    assert.deepEqual(melodyListAll, melodyListAllRefactor);\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/autocomposer-melody.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "testDescribe",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/autocomposer-melody.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14",
    "access": null,
    "description": "AutoComposerMelody",
    "lineNumber": 22
  },
  {
    "__docId__": 175,
    "kind": "testDescribe",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe15",
    "access": null,
    "description": "#_getAllChordTones",
    "lineNumber": 23
  },
  {
    "__docId__": 176,
    "kind": "testIt",
    "name": "it16",
    "testId": 16,
    "memberof": "test/autocomposer-melody.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe15.it16",
    "access": null,
    "description": "should return all chord tones in the range (inclusive)",
    "lineNumber": 24
  },
  {
    "__docId__": 177,
    "kind": "testDescribe",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe17",
    "access": null,
    "description": "#_buildChordUnitList",
    "lineNumber": 36
  },
  {
    "__docId__": 178,
    "kind": "testIt",
    "name": "it18",
    "testId": 18,
    "memberof": "test/autocomposer-melody.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe17.it18",
    "access": null,
    "description": "should return a list of ChordUnits for a given progression",
    "lineNumber": 37
  },
  {
    "__docId__": 179,
    "kind": "testDescribe",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe19",
    "access": null,
    "description": "#_buildMelodyUnit",
    "lineNumber": 61
  },
  {
    "__docId__": 180,
    "kind": "testIt",
    "name": "it20",
    "testId": 20,
    "memberof": "test/autocomposer-melody.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe19.it20",
    "access": null,
    "description": "should build a melody unit with metadata for each raw melody",
    "lineNumber": 62
  },
  {
    "__docId__": 181,
    "kind": "testDescribe",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21",
    "access": null,
    "description": "#_buildMelodyUnitList",
    "lineNumber": 91
  },
  {
    "__docId__": 182,
    "kind": "testIt",
    "name": "it22",
    "testId": 22,
    "memberof": "test/autocomposer-melody.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21.it22",
    "access": null,
    "description": "should sort the output if specified",
    "lineNumber": 95
  },
  {
    "__docId__": 183,
    "kind": "testIt",
    "name": "it23",
    "testId": 23,
    "memberof": "test/autocomposer-melody.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe21.it23",
    "access": null,
    "description": "should limit the output if specified",
    "lineNumber": 101
  },
  {
    "__docId__": 184,
    "kind": "testDescribe",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24",
    "access": null,
    "description": "#buildSimpleMelodies",
    "lineNumber": 109
  },
  {
    "__docId__": 185,
    "kind": "testIt",
    "name": "it25",
    "testId": 25,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it25",
    "access": null,
    "description": "should return a list of melodies for a given progression",
    "lineNumber": 110
  },
  {
    "__docId__": 186,
    "kind": "testIt",
    "name": "it26",
    "testId": 26,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it26",
    "access": null,
    "description": "should return less melodies if filters are on",
    "lineNumber": 117
  },
  {
    "__docId__": 187,
    "kind": "testIt",
    "name": "it27",
    "testId": 27,
    "memberof": "test/autocomposer-melody.js~describe14.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe24.it27",
    "access": null,
    "description": "should return raw melodies as a string array",
    "lineNumber": 126
  },
  {
    "__docId__": 188,
    "kind": "testDescribe",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe28",
    "access": null,
    "description": "#buildBasicBassLine",
    "lineNumber": 134
  },
  {
    "__docId__": 189,
    "kind": "testIt",
    "name": "it29",
    "testId": 29,
    "memberof": "test/autocomposer-melody.js~describe14.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe28.it29",
    "access": null,
    "description": "should return a simple bassline for a melody",
    "lineNumber": 135
  },
  {
    "__docId__": 190,
    "kind": "testDescribe",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe30",
    "access": null,
    "description": "#buildSimpleAccompaniment",
    "lineNumber": 147
  },
  {
    "__docId__": 191,
    "kind": "testIt",
    "name": "it31",
    "testId": 31,
    "memberof": "test/autocomposer-melody.js~describe14.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.describe30.it31",
    "access": null,
    "description": "should return a simple accompaniment for a melody",
    "lineNumber": 148
  },
  {
    "__docId__": 192,
    "kind": "testIt",
    "name": "it32",
    "testId": 32,
    "memberof": "test/autocomposer-melody.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/autocomposer-melody.js~describe14.it32",
    "access": null,
    "description": "should not break after some refactoring...",
    "lineNumber": 160
  },
  {
    "__docId__": 193,
    "kind": "testFile",
    "name": "test/packaging.js",
    "content": "// Testing to see if the package works properly.\r\nvar assert = require('assert');\r\nvar AutoComposer = require('../index.js');\r\n\r\ndescribe('AutoComposer', function() {\r\n  it('should create a variety of simple melodies', function() {\r\n    var chordProgression = [\"G\", \"Em\", \"C\", \"D\"];\r\n    var results = AutoComposer.melody.buildSimpleMelodies(chordProgression);\r\n\r\n    assert(results, \"melody.buildSimpleMelodies() failed!\");\r\n  });\r\n});\r\n",
    "static": true,
    "longname": "test/packaging.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "testDescribe",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/packaging.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/packaging.js~describe33",
    "access": null,
    "description": "AutoComposer",
    "lineNumber": 5
  },
  {
    "__docId__": 195,
    "kind": "testIt",
    "name": "it34",
    "testId": 34,
    "memberof": "test/packaging.js~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/packaging.js~describe33.it34",
    "access": null,
    "description": "should create a variety of simple melodies",
    "lineNumber": 6
  }
]